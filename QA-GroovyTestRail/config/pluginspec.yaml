# This is default sample specification
# Feel free to change it
# Call flowpdk showdoc pluginspec to see the list of available fields and their description
pluginName: 'QA-GroovyTestRail'
version: '1.0.0'
description: 'plugin for CRUD test cases via REST and CLI'
author: 'Ed Serbin'
authorUrl: 'https://ecflow.testrail.net'
category: 'Utilities'

# This is a declaration for the plugin configuration
configuration:
  # Shell to be used for checking connection
  shell: ec-perl
  parameters:
   - name: authScheme
     type: entry
     label: authScheme
     value: basic
   - name: config
     type: entry
     label: Configuration Name
     required: true
     documentation: The name for the created configuration
   - name: desc
     type: entry
     label: Description
     required: false
     documentation: Description for the configuration
   - name: endpoint
     label: Endpoint
     type: entry
     required: true
     documentation: Third-party endpoint to connect to.
   - name: basic_credential
     type: credential
     label: Credential
     userNameLabel: Username
     required: true
     passwordLabel: Password
   - name: checkConnection
     label: Check Connection?
     type: checkbox
     checkedValue: true
     uncheckedValue: false
     initiallyChecked: 1
   - name: debugLevel
     # This parameter name "debugLevel" is supported by ECPDF Logger out of the box
     label: Debug Level
     type: select
     required: 0
     value: 0
     options:
       - name: Info
         value: 0
       - name: Debug
         value: 1
       - name: Trace
         value: 2

procedures:
- name: Get Test Case
  description: The gettign the Test Case from Test Rail as JSON
  hasConfig: true # configuration field will be generated automatically
  parameters:
  - name: caseId
    documentation: Target Case Id in the Test Rail for Update or Create
    type: entry
    required: true
    label: Case Id in the Test Rail
  outputParameters:
    caseJSON: case as JSON
    caseId: Id of created/updated test case on TestRail, if exist
  # Steps are not defined so we assume that this is one-step procedure with a single step named Deploy
  shell: ec-perl
- name: Create Test Case
  description: The procedure take a JSON and import it to Test Rail as Test Case
  hasConfig: true # configuration field will be generated automatically
  parameters:
  - name: json
    documentation: JSON of the Test Case
    type: textarea
    required: true
    label: JSON Value
  - name: sectionId
    documentation: Id of section in Test Rail for adding the Test Case
    type: entry
    required: true
    label: Section Id
  outputParameters:
    caseId: Id of created/updated test case on TestRail
    caseJSON: case as JSON
  shell: ec-perl
- name: Update Test Case
  description: The procedure take a JSON and update Case in Test Rail
  hasConfig: true 
  parameters:
  - name: caseId
    documentation: Target Case Id in the Test Rail for Update or Create
    type: entry
    required: true
    label: Case Id in the Test Rail
  - name: json
    documentation: JSON of the Test Case
    type: textarea
    required: true
    label: JSON Value
  outputParameters:
    caseId: Id of created/updated test case on TestRail
    caseJSON: case as JSON
  # Steps are not defined so we assume that this is one-step procedure with a single step named Deploy
  shell: ec-perl
- name: Get Test Case CLI
  description: The getting the Test Case from Test Rail as JSON via CLI
  hasConfig: true # configuration field will be generated automatically
  parameters:
    - name: caseId
      documentation: Target Case Id in the Test Rail for Update or Create
      type: entry
      required: true
      label: Case Id in the Test Rail
  outputParameters:
    caseJSON: case as JSON
    caseId: Id of created/updated test case on TestRail, if exist
  shell: ec-perl
- name: Create Test Case CLI
  description: The procedure take a JSON and import it to Test Rail as Test Case via CLI
  hasConfig: true # configuration field will be generated automatically
  parameters:
    - name: json
      documentation: JSON of the Test Case
      type: textarea
      required: true
      label: JSON Value
    - name: sectionId
      documentation: Id of section in Test Rail for adding the Test Case
      type: entry
      required: true
      label: Section Id
  outputParameters:
    caseId: Id of created/updated test case on TestRail
    caseJSON: case as JSON
  # Steps are not defined so we assume that this is one-step procedure with a single step named Deploy
  shell: ec-perl
- name: Update Test Case CLI
  description: The procedure take a JSON and update Case in Test Rail via CLI
  hasConfig: true # configuration field will be generated automatically
  parameters:
    - name: caseId
      documentation: Target Case Id in the Test Rail for Update or Create
      type: entry
      required: true
      label: Case Id in the Test Rail
    - name: json
      documentation: JSON of the Test Case
      type: textarea
      required: true
      label: JSON Value
  outputParameters:
    caseId: Id of created/updated test case on TestRail
    caseJSON: case as JSON
  # Steps are not defined so we assume that this is one-step procedure with a single step named Deploy
  shell: ec-perl