<?xml version="1.0" encoding="UTF-8"?><exportedData buildLabel="build_3.5_30434_OPT_2010.01.13_07:32:22" buildVersion="3.5.1.30434" version="39">
  <exportPath>/projects/QA-GroovyGit-1.0.0.0</exportPath>
  <project>
    <projectName>QA-GroovyGit-1.0.0.0</projectName>
    <procedure>
      <procedureName>Get User Info</procedureName>
      <description>Get User Info</description>
      <step>
        <stepName>Get User Info</stepName>
        <description/>
        <command>$[/myProject/scripts/preamble.groovy]

QAGroovyGit plugin = new QAGroovyGit()
plugin.runStep('Get User Info', 'Get User Info', 'getUserInfo')
</command>
        <shell>ec-groovy -cp "$[/server/settings/pluginsDirectory]/QA-GroovyJira-1.0.0.0/agent/deps/lib/flowpdf-groovy-lib-1.0.0-SNAPSHOT.jar"</shell>
        <errorHandling>failProcedure</errorHandling>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <exclusive>0</exclusive>
        <parallel>0</parallel>
        <releaseExclusive>0</releaseExclusive>
        <retries>0</retries>
        <timeLimitUnits>minutes</timeLimitUnits>
        <projectName>QA-GroovyGit-1.0.0.0</projectName>
      </step>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <defaultValue/>
        <required>1</required>
        <type>entry</type>
        <description>Previously defined configuration for the plugin</description>
        <label>Configuration Name:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <propertySheet>
        <property>
          <propertyName>ec_parameterForm</propertyName>
          <value>&lt;!--
    This form is generated automatically from the parameters pluginspec.
    Please not not edit this file manually as it will be regenerated.
--&gt;
&lt;editor&gt;
  &lt;help&gt;/commander/pages/QA-GroovyGit-1.0.0.0/help?s=Administration&amp;amp;ss=Plugins#GetUserInfo&lt;/help&gt;
  &lt;formElement&gt;
    &lt;type&gt;entry&lt;/type&gt;
    &lt;property&gt;config&lt;/property&gt;
    &lt;configuration&gt;1&lt;/configuration&gt;
    &lt;propertyReference&gt;/plugins/QA-GroovyGit-1.0.0.0/project/ec_plugin_cfgs&lt;/propertyReference&gt;
    &lt;required&gt;1&lt;/required&gt;
    &lt;documentation&gt;Previously defined configuration for the plugin&lt;/documentation&gt;
    &lt;label&gt;Configuration Name:&lt;/label&gt;
  &lt;/formElement&gt;
&lt;/editor&gt;</value>
        </property>
        <property>
          <propertySheet>
            <property>
              <propertySheet>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>config</propertyName>
                </property>
              </propertySheet>
              <propertyName>parameters</propertyName>
            </property>
          </propertySheet>
          <propertyName>ec_customEditorData</propertyName>
        </property>
      </propertySheet>
    </procedure>
    <procedure>
      <procedureName>DeleteConfiguration</procedureName>
      <description>Deletes an existing plugin configuration</description>
      <step>
        <stepName>deleteConfiguration</stepName>
        <command># PLEASE DO NOT EDIT THIS FILE
use ElectricCommander;

# get an EC object
my $ec = ElectricCommander-&gt;new();
$ec-&gt;abortOnError(0);

my $config = '$[config]';

my $PLUGIN_NAME = 'QA-GroovyGit';
my $project_name = '/plugins/QA-GroovyGit-1.0.0.0/project';

if (! defined $PLUGIN_NAME || $PLUGIN_NAME eq "\@PLUGIN_KEY\@") {
    exit_with_error("PLUGIN_NAME must be defined\n");
}

if (! defined $config || $config eq '') {
    exit_with_error("You have to supply non-empty configuration name\n");
}

# check to see if a config with this name already exists before we do anything else
my $xpath = $ec-&gt;getProperty("$project_name/ec_plugin_cfgs/$config");
my $property = $xpath-&gt;findvalue('//response/property/propertyName');

if (! defined $property || $property eq '') {
    exit_with_error("Error: A configuration named '$config' does not exist.");
}

# Delete configuration property sheet
$ec-&gt;deleteProperty("$project_name/ec_plugin_cfgs/$config");


# Delete credentials
my $credentials = $ec-&gt;getCredentials({projectName =&gt; 'QA-GroovyGit-1.0.0.0'});
for my $cred ($credentials-&gt;findnodes('//credential')) {
    my $name = $cred-&gt;findvalue('credentialName')-&gt;string_value;
    if ($name =~ /^$config/) {
        $ec-&gt;deleteCredential({projectName =&gt; 'QA-GroovyGit-1.0.0.0', credentialName =&gt; $name});
    }
}

sub exit_with_error {
    my ( $error_message ) = @_;
    $ec-&gt;setProperty('/myJob/configError', $error_message);
    print $error_message;
    exit 1;
}


</command>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <releaseMode>none</releaseMode>
        <shell>ec-perl</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <exclusive>0</exclusive>
        <parallel>0</parallel>
        <releaseExclusive>0</releaseExclusive>
        <retries>0</retries>
        <projectName>QA-GroovyGit-1.0.0.0</projectName>
      </step>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <defaultValue/>
        <required>1</required>
        <type>entry</type>
        <description>The name of the configuration to delete.</description>
        <label>Configuration:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <propertySheet>
        <property>
          <propertyName>ec_parameterForm</propertyName>
          <value>&lt;!--
Please do not edit this file
--&gt;
&lt;editor&gt;
    &lt;formElement&gt;
        &lt;type&gt;entry&lt;/type&gt;
        &lt;label&gt;Configuration:&lt;/label&gt;
        &lt;property&gt;config&lt;/property&gt;
        &lt;required&gt;1&lt;/required&gt;
        &lt;documentation&gt;The name of the configuration to delete.&lt;/documentation&gt;
    &lt;/formElement&gt;
&lt;/editor&gt;
</value>
        </property>
        <property>
          <propertySheet>
            <property>
              <propertySheet>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>config</propertyName>
                </property>
              </propertySheet>
              <propertyName>parameters</propertyName>
            </property>
          </propertySheet>
          <propertyName>ec_customEditorData</propertyName>
        </property>
      </propertySheet>
    </procedure>
    <procedure>
      <procedureName>CreateConfiguration</procedureName>
      <description>Creates a plugin configuration</description>
      <step>
        <stepName>createConfiguration</stepName>
        <command>
## DO NOT EDIT THIS BLOCK === createConfiguration starts ===
# Please do not edit this file
use ElectricCommander;
use ElectricCommander::PropDB;
use JSON;

use constant {
    SUCCESS =&gt; 0,
    ERROR   =&gt; 1,
};

## get an EC object
my $ec = new ElectricCommander();

my $projName = '$[/myProject/name]';
my $configPropertySheet;
eval {
    $configPropertySheet = $ec-&gt;getPropertyValue('/myProject/ec_configPropertySheet');
    1;
} or do {
    $configPropertySheet = 'ec_plugin_cfgs';
};

eval {
    createConfigurationPropertySheet($configPropertySheet);
    1;
} or do {
    my $err = $@;
    print $err;
    rollback($configPropertySheet, $err);
    $ec-&gt;setProperty("/myJob/configError", $err);
    exit 1;
};

my $steps = [];
my $stepsJSON = eval { $ec-&gt;getPropertyValue("/projects/$projName/procedures/CreateConfiguration/ec_stepsWithAttachedCredentials") };
if ($stepsJSON) {
    $steps = decode_json($stepsJSON);
}

my $configName = '$[config]';

eval {
    my $opts = getActualParameters();
    for my $param ($ec-&gt;getFormalParameters({
        projectName =&gt; $projName,
        procedureName =&gt; 'CreateConfiguration',
    })-&gt;findnodes('//formalParameter')) {
        my $type = $param-&gt;findvalue('type') . '';
        if ($type eq 'credential') {
            my $required = $param-&gt;findvalue('required') . '';
            my $fieldName = $param-&gt;findvalue('formalParameterName') . '';
            my $credentialName = $opts-&gt;{$fieldName};

            eval {
                createAndAttachCredential($credentialName, $configName, $configPropertySheet, $steps);
                1;
            } or do {
                my $err = $@;
                if ($required) {
                    die $err;
                }
                else {
                    print "Failed to create credential $credentialName: $err\n";
                }
            };
        }
    }
    1;
} or do {
    my $err = $@;
    print $err;
    rollback($configPropertySheet, $err);
    $ec-&gt;setProperty("/myJob/configError", $err);
    exit 1;
};

sub createAndAttachCredential {
    my ($credName, $configName, $configPropertySheet, $steps) = @_;

    my $xpath = $ec-&gt;getFullCredential($credName);
    my $errors = $ec-&gt;checkAllErrors($xpath);

    my $clientID = $xpath-&gt;findvalue("//userName");
    my $clientSecret = $xpath-&gt;findvalue("//password");

    my $projName = '$[/myProject/projectName]';

    my $credObjectName = $credName eq 'credential' ? $configName : "${configName}_${credName}";
    # die $credObjectName;
    # Create credential
    $ec-&gt;deleteCredential($projName, $credObjectName);
    $xpath = $ec-&gt;createCredential($projName, $credObjectName, $clientID, $clientSecret);
    $errors .= $ec-&gt;checkAllErrors($xpath);

    # Give config the credential's real name
    my $configPath = "/projects/$projName/$configPropertySheet/$configName/$credName";
    $xpath = $ec-&gt;setProperty($configPath, $credObjectName);
    $errors .= $ec-&gt;checkAllErrors($xpath);

    # Give job launcher full permissions on the credential
    my $user = '$[/myJob/launchedByUser]';
    $xpath = $ec-&gt;createAclEntry("user", $user, {
        projectName =&gt; $projName,
        credentialName =&gt; $credObjectName,
        readPrivilege =&gt; 'allow',
        modifyPrivilege =&gt; 'allow',
        executePrivilege =&gt; 'allow',
        changePermissionsPrivilege =&gt; 'allow'
    });
    $errors .= $ec-&gt;checkAllErrors($xpath);
    # Attach credential to steps that will need it
    for my $step( @$steps ) {
        print "Attaching credential to procedure " . $step-&gt;{procedureName} . " at step " . $step-&gt;{stepName} . "\n";
        my $apath = $ec-&gt;attachCredential($projName, $credObjectName,
                                        {procedureName =&gt; $step-&gt;{procedureName},
                                         stepName =&gt; $step-&gt;{stepName}});
        $errors .= $ec-&gt;checkAllErrors($apath);
    }

    if ("$errors" ne "") {
        # Cleanup the partially created configuration we just created
        $ec-&gt;deleteProperty($configPath);
        $ec-&gt;deleteCredential($projName, $credObjectName);
        my $errMsg = "Error creating configuration credential: " . $errors;
        $ec-&gt;setProperty("/myJob/configError", $errMsg);
        die $errMsg;
    }
}

sub rollback {
    my ($configPropertySheet, $error) = @_;

    if ($error !~ /already exists/) {
        my $configName = '$[config]';
        $ec-&gt;deleteProperty("/myProject/$configPropertySheet/$configName");
    }
}

sub getActualParameters {
    my $x       = $ec-&gt;getJobDetails($ENV{COMMANDER_JOBID});
    my $nodeset = $x-&gt;find('//actualParameter');
    my $opts;

    foreach my $node ($nodeset-&gt;get_nodelist) {
        my $parm = $node-&gt;findvalue('actualParameterName');
        my $val  = $node-&gt;findvalue('value');
        $opts-&gt;{$parm} = "$val";
    }
    return $opts;
}

sub createConfigurationPropertySheet {
    my ($configPropertySheet) = @_;

    ## load option list from procedure parameters
    my $ec = ElectricCommander-&gt;new;
    $ec-&gt;abortOnError(0);
    my $x       = $ec-&gt;getJobDetails($ENV{COMMANDER_JOBID});
    my $nodeset = $x-&gt;find('//actualParameter');
    my $opts = getActualParameters();

    if (!defined $opts-&gt;{config} || "$opts-&gt;{config}" eq "") {
        die "config parameter must exist and be non-blank\n";
    }

    # check to see if a config with this name already exists before we do anything else
    my $xpath    = $ec-&gt;getProperty("/myProject/$configPropertySheet/$opts-&gt;{config}");
    my $property = $xpath-&gt;findvalue("//response/property/propertyName");

    if (defined $property &amp;&amp; "$property" ne "") {
        my $errMsg = "A configuration named '$opts-&gt;{config}' already exists.";
        $ec-&gt;setProperty("/myJob/configError", $errMsg);
        die $errMsg;
    }

    my $cfg = new ElectricCommander::PropDB($ec, "/myProject/$configPropertySheet");

    # add all the options as properties
    foreach my $key (keys %{$opts}) {
        if ("$key" eq "config") {
            next;
        }
        $cfg-&gt;setCol("$opts-&gt;{config}", "$key", "$opts-&gt;{$key}");
    }
}
## DO NOT EDIT THIS BLOCK === createConfiguration ends, checksum: 99e7a2462ebf0450ab27f98d7b6b987a ===
# Please do not edit this file</command>
        <errorHandling>abortProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <postProcessor>postp</postProcessor>
        <releaseMode>none</releaseMode>
        <shell>ec-perl</shell>
        <timeLimitUnits>minutes</timeLimitUnits>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <exclusive>0</exclusive>
        <parallel>0</parallel>
        <releaseExclusive>0</releaseExclusive>
        <retries>0</retries>
        <projectName>QA-GroovyGit-1.0.0.0</projectName>
        <attachedParameters>
          <formalParameterName>bearer_credential</formalParameterName>
        </attachedParameters>
      </step>
      <formalParameter>
        <formalParameterName>authScheme</formalParameterName>
        <defaultValue>bearer</defaultValue>
        <required>0</required>
        <type>entry</type>
        <description/>
        <label>authScheme:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <defaultValue/>
        <required>1</required>
        <type>entry</type>
        <description>The name for the created configuration</description>
        <label>Configuration Name:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <formalParameter>
        <formalParameterName>desc</formalParameterName>
        <defaultValue/>
        <required>0</required>
        <type>entry</type>
        <description>Description for the configuration</description>
        <label>Description:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <formalParameter>
        <formalParameterName>endpoint</formalParameterName>
        <defaultValue/>
        <required>0</required>
        <type>entry</type>
        <description>Third-party endpoint to connect to.</description>
        <label/>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <formalParameter>
        <formalParameterName>bearer_credential</formalParameterName>
        <defaultValue/>
        <required>0</required>
        <type>credential</type>
        <description/>
        <label>Bearer Token:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <formalParameter>
        <formalParameterName>debugLevel</formalParameterName>
        <defaultValue>0</defaultValue>
        <required>0</required>
        <type>select</type>
        <description>This option sets debug level for logs. If info is selected, only summary information will be shown, for debug, there will be some debug information and for trace the whole requests and responses will be shown.</description>
        <label>Debug Level:</label>
        <expansionDeferred>0</expansionDeferred>
      </formalParameter>
      <propertySheet>
        <property>
          <propertyName>ec_checkConnection</propertyName>
          <value/>
        </property>
        <property>
          <propertyName>ec_parameterForm</propertyName>
          <value>&lt;!--
    This form is generated automatically from the parameters pluginspec.
    Please not not edit this file manually as it will be regenerated.
--&gt;

&lt;editor&gt;
  &lt;help&gt;/commander/pages/QA-GroovyGit-1.0.0.0/help?s=Administration&amp;amp;ss=Plugins#CreateConfiguration&lt;/help&gt;
  &lt;formElement&gt;
    &lt;type&gt;entry&lt;/type&gt;
    &lt;property&gt;authScheme&lt;/property&gt;
    &lt;label&gt;authScheme:&lt;/label&gt;
    &lt;value&gt;bearer&lt;/value&gt;
  &lt;/formElement&gt;
  &lt;formElement&gt;
    &lt;type&gt;entry&lt;/type&gt;
    &lt;property&gt;config&lt;/property&gt;
    &lt;required&gt;1&lt;/required&gt;
    &lt;documentation&gt;The name for the created configuration&lt;/documentation&gt;
    &lt;label&gt;Configuration Name:&lt;/label&gt;
  &lt;/formElement&gt;
  &lt;formElement&gt;
    &lt;type&gt;entry&lt;/type&gt;
    &lt;property&gt;desc&lt;/property&gt;
    &lt;required&gt;0&lt;/required&gt;
    &lt;documentation&gt;Description for the configuration&lt;/documentation&gt;
    &lt;label&gt;Description:&lt;/label&gt;
  &lt;/formElement&gt;
  &lt;formElement&gt;
    &lt;type&gt;entry&lt;/type&gt;
    &lt;property&gt;endpoint&lt;/property&gt;
    &lt;required&gt;0&lt;/required&gt;
    &lt;documentation&gt;Third-party endpoint to connect to.&lt;/documentation&gt;
  &lt;/formElement&gt;
  &lt;formElement&gt;
    &lt;type&gt;credential&lt;/type&gt;
    &lt;property&gt;bearer_credential&lt;/property&gt;
    &lt;required&gt;0&lt;/required&gt;
    &lt;htmlDocumentation&gt;token for access&lt;/htmlDocumentation&gt;
    &lt;label&gt;Bearer Token:&lt;/label&gt;
    &lt;attachedAsParameterToStep&gt;createConfiguration&lt;/attachedAsParameterToStep&gt;
    &lt;credentialType&gt;secret&lt;/credentialType&gt;
    &lt;passwordLabel&gt;token&lt;/passwordLabel&gt;
  &lt;/formElement&gt;
  &lt;formElement&gt;
    &lt;type&gt;select&lt;/type&gt;
    &lt;property&gt;debugLevel&lt;/property&gt;
    &lt;required&gt;0&lt;/required&gt;
    &lt;documentation&gt;This option sets debug level for logs. If info is selected, only summary information will be shown, for debug, there will be some debug information and for trace the whole requests and responses will be shown.&lt;/documentation&gt;
    &lt;label&gt;Debug Level:&lt;/label&gt;
    &lt;option&gt;
      &lt;name&gt;Info&lt;/name&gt;
      &lt;value&gt;0&lt;/value&gt;
    &lt;/option&gt;
    &lt;option&gt;
      &lt;name&gt;Debug&lt;/name&gt;
      &lt;value&gt;1&lt;/value&gt;
    &lt;/option&gt;
    &lt;option&gt;
      &lt;name&gt;Trace&lt;/name&gt;
      &lt;value&gt;2&lt;/value&gt;
    &lt;/option&gt;
    &lt;value&gt;0&lt;/value&gt;
  &lt;/formElement&gt;
&lt;/editor&gt;</value>
        </property>
        <property>
          <propertySheet>
            <property>
              <propertySheet>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>authScheme</propertyName>
                </property>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>config</propertyName>
                </property>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>desc</propertyName>
                </property>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>endpoint</propertyName>
                </property>
                <property>
                  <propertySheet>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>bearer_credential</propertyName>
                </property>
                <property>
                  <propertySheet>
                    <property>
                      <propertySheet>
                        <property>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <value>Info</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <value>0</value>
                            </property>
                          </propertySheet>
                          <propertyName>option1</propertyName>
                        </property>
                        <property>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <value>Debug</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <value>1</value>
                            </property>
                          </propertySheet>
                          <propertyName>option2</propertyName>
                        </property>
                        <property>
                          <propertySheet>
                            <property>
                              <propertyName>text</propertyName>
                              <value>Trace</value>
                            </property>
                            <property>
                              <propertyName>value</propertyName>
                              <value>2</value>
                            </property>
                          </propertySheet>
                          <propertyName>option3</propertyName>
                        </property>
                        <property>
                          <propertyName>type</propertyName>
                          <value>list</value>
                        </property>
                        <property>
                          <propertyName>optionCount</propertyName>
                          <value>3</value>
                        </property>
                      </propertySheet>
                      <propertyName>options</propertyName>
                    </property>
                    <property>
                      <propertyName>formType</propertyName>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                  <propertyName>debugLevel</propertyName>
                </property>
              </propertySheet>
              <propertyName>parameters</propertyName>
            </property>
          </propertySheet>
          <propertyName>ec_customEditorData</propertyName>
        </property>
        <property>
          <propertyName>ec_stepsWithAttachedCredentials</propertyName>
          <value>[{"procedureName":"Get User Info","stepName":"Get User Info"}]</value>
        </property>
      </propertySheet>
    </procedure>
    <propertySheet>
      <property>
        <propertyName>ec_keepFilesExtensions</propertyName>
        <value>true</value>
      </property>
      <property>
        <propertyName>ec_formXmlCompliant</propertyName>
        <value>true</value>
      </property>
      <property>
        <propertySheet>
          <property>
            <propertyName>preamble.groovy</propertyName>
            <value>import com.electriccloud.flowpdf.Context
import com.electriccloud.flowpdf.FlowPlugin
import com.electriccloud.flowpdf.StepParameters
import com.electriccloud.flowpdf.StepResult
import com.electriccloud.flowpdf.*
import com.electriccloud.flowpdf.client.*


/**
* {{pluginClassName}}
*/
class QAGroovyGit extends FlowPlugin {

    @Override
    Map&lt;String, Object&gt; pluginInfo() {
        log.setLogLevel(2)
        log.setLogToProperty('/myJobStep/ec_debug_log')

        return [
                pluginName     : 'QA-GroovyGit',
                pluginVersion  : '1.0.0.0',
                configFields   : ['config'],
                configLocations: ['ec_plugin_cfgs'],
        ]
    }

    def getUserInfo(StepParameters parameters, StepResult sr) {
        log.info("{{stepMethodName}} was invoked with StepParameters", parameters.toString())

        Context context = getContext()
        log.info("CONTEXT: " + context.getRunContext())       

        REST rest = context.newRESTClient()
        HTTPRequest request = rest.newRequest(
                method: 'GET',
                path: '/user',
                contentType: 'JSON',
                // headers: [
                //  'User-Agent': 'curl/7.47.0'
                // ]
        )
        def json
        try {
            json = rest.doRequest(request)
            log.info("-------&gt; json: $json")
        }
        catch(Exception e) {
            log.info("-------&gt; error: $e")
            log.info("-------&gt; json: $json")
            sr.setJobStepSummary("Job failed")
            sr.setJobStepOutcome("error")
            return
        }

        // Setting job step summary to the config name
        sr.setJobStepSummary("request has beed completed")
        sr.apply()
        log.info("step {{step.name}} has been finished")
    }


}</value>
          </property>
        </propertySheet>
        <propertyName>scripts</propertyName>
      </property>
      <property>
        <propertySheet>
          <property>
            <propertySheet>
              <property>
                <propertySheet>
                  <property>
                    <propertyName>label</propertyName>
                    <value>Description</value>
                  </property>
                  <property>
                    <propertyName>order</propertyName>
                    <value>1</value>
                  </property>
                </propertySheet>
                <propertyName>desc</propertyName>
              </property>
            </propertySheet>
            <propertyName>fields</propertyName>
          </property>
          <property>
            <propertyName>configLocation</propertyName>
            <value>ec_plugin_cfgs</value>
          </property>
          <property>
            <propertyName>form</propertyName>
            <value>$[/projects/QA-GroovyGit-1.0.0.0/procedures/CreateConfiguration/ec_parameterForm]</value>
          </property>
        </propertySheet>
        <propertyName>ec_config</propertyName>
      </property>
      <property>
        <propertyName>ec_configPropertySheet</propertyName>
        <value>ec_plugin_cfgs</value>
      </property>
      <property>
        <propertyName>ec_pluginCategory</propertyName>
        <value>Utilities</value>
      </property>
      <property>
        <propertyName>ec_setup</propertyName>
        <value>#Auto-generated part begins
######################################
#Do not touch anything below this line

use strict;
use warnings;
no warnings 'redefine';

use ElectricCommander;
use JSON qw(decode_json);
use subs qw(debug);
use Time::HiRes qw(time);

my @logs = ();
sub debug($) {
    my ($message) = @_;
    push @logs, scalar time . ": " . $message;

    if ($ENV{EC_SETUP_DEBUG}) {
        print scalar time . ": $message\n";
    }
}


debug "Promotion started";
my $start = time();

my $category;
eval {
    $category = $commander-&gt;getProperty("/projects/$pluginName/ec_pluginCategory")-&gt;findvalue('//value')-&gt;string_value;
};

$category ||= 'Utilities';
my $stepsWithCredentials = getStepsWithCredentials();
debug "Category: $category";


for my $procedure ($commander-&gt;getProcedures({ projectName =&gt; $pluginName })-&gt;findnodes('//procedure')) {
    my $procedureName = $procedure-&gt;findvalue('procedureName')-&gt;string_value;
    my $description = $procedure-&gt;findvalue('description')-&gt;string_value;

    if (shouldAddStepPicker($procedureName)) {
        debug "Adding step picker to $procedureName";
        addStepPicker($procedureName, $description, $category);
    }
}

debug "Added step pickers";

cleanAllStepPickers($batch);
debug "Cleaned old step pickers";

if ($upgradeAction eq 'upgrade') {
    migrateConfigurations($otherPluginName);
    migrateProperties($otherPluginName);
    debug "Migrated properties";
}

if ($promoteAction eq 'promote') {
    my @objectTypes = qw(resources workspaces projects);
    for my $objectType (@objectTypes) {
        $commander-&gt;createAclEntry({
            principalType              =&gt; 'user',
            principalName              =&gt; "project: $pluginName",
            systemObjectName           =&gt; $objectType,
            objectType                 =&gt; 'systemObject',
            readPrivilege              =&gt; 'allow',
            modifyPrivilege            =&gt; 'allow',
            executePrivilege           =&gt; 'allow',
            changePermissionsPrivilege =&gt; 'allow'
        });
    }
}

my $nowString = localtime;
$commander-&gt;setProperty("/plugins/$pluginName/project/logs/$nowString", { value =&gt; join("\n", @logs) });

my $end = time();
debug "ec_setup execution is over";
debug "Elapsed time: " . ($end - $start) . "\n";


sub migrateConfigurations {
    my ($otherPluginName) = @_;

    my $configName = eval {
        $commander-&gt;getProperty("/plugins/$otherPluginName/project/ec_configPropertySheet")-&gt;findvalue('//value')-&gt;string_value
    } || 'ec_plugin_cfgs';

    $commander-&gt;clone({
        path      =&gt; "/plugins/$otherPluginName/project/$configName",
        cloneName =&gt; "/plugins/$pluginName/project/$configName"
    });

    my $xpath = $commander-&gt;getCredentials("/plugins/$otherPluginName/project");
    for my $credential ($xpath-&gt;findnodes('//credential')) {
        my $credName = $credential-&gt;findvalue('credentialName')-&gt;string_value;
        debug "Migrating credential $credName";
        $commander-&gt;clone({
            path      =&gt; "/plugins/$otherPluginName/project/credentials/$credName",
            cloneName =&gt; "/plugins/$pluginName/project/credentials/$credName"
        });
        $commander-&gt;deleteAclEntry({
            principalName  =&gt; "project: $otherPluginName",
            projectName    =&gt; $pluginName,
            credentialName =&gt; $credName,
        });
        $commander-&gt;deleteAclEntry({
            principalType  =&gt; 'user',
            principalName  =&gt; "project: $pluginName",
            credentialName =&gt; $credName,
        });

        $commander-&gt;createAclEntry({
            principalType              =&gt; 'user',
            principalName              =&gt; "project: $pluginName",
            projectName                =&gt; $pluginName,
            credentialName             =&gt; $credName,
            objectType                 =&gt; 'credential',
            readPrivilege              =&gt; 'allow',
            modifyPrivilege            =&gt; 'allow',
            executePrivilege           =&gt; 'allow',
            changePermissionsPrivilege =&gt; 'allow'
        });

        for my $step (@$stepsWithCredentials) {
            $commander-&gt;attachCredential({
                projectName    =&gt; $pluginName,
                procedureName  =&gt; $step-&gt;{procedureName},
                stepName       =&gt; $step-&gt;{stepName},
                credentialName =&gt; $credName,
            });
            debug "Attached credential to $step-&gt;{stepName}";
        }
    }
}


sub migrateProperties {
    my ($otherPluginName) = @_;
    my $clonedPropertySheets = eval {
        decode_json($commander-&gt;getProperty("/plugins/$otherPluginName/project/ec_clonedProperties")-&gt;findvalue('//value')-&gt;string_value);
    };
    unless ($clonedPropertySheets) {
        debug "No properties to migrate";
        return;
    }

    for my $prop (@$clonedPropertySheets) {
        $commander-&gt;clone({
            path      =&gt; "/plugins/$otherPluginName/project/$prop",
            cloneName =&gt; "/plugins/$pluginName/project/$prop"
        });
        debug "Cloned $prop"
    }
}


sub getStepsWithCredentials {
    my $retval = [];
    eval {
        my $pluginName = 'QA-GroovyGit-1.0.0.0';
        my $stepsJson = $commander-&gt;getProperty("/projects/$pluginName/procedures/CreateConfiguration/ec_stepsWithAttachedCredentials")-&gt;findvalue('//value')-&gt;string_value;
        $retval = decode_json($stepsJson);
    };
    return $retval;
}



#-#    commander =&gt; $commander,
#    -#    pluginName =&gt; $pluginName,
#        -#    otherPluginName =&gt; $otherPluginName,
#            -#    upgradeAction =&gt; $upgradeAction,
#                -#    promoteAction =&gt; $promoteAction,


#TODO demote
sub addStepPicker {
    my ($procedureName, $description, $category) = @_;

    my $pickerDescription = descriptionForStepPicker($procedureName);
    $pickerDescription ||= $description;
    $pickerDescription ||= $procedureName;

    my $label = 'QA-GroovyGit - ' . $procedureName;
    push @::createStepPickerSteps, {
        label       =&gt; $label,
        procedure   =&gt; $procedureName,
        description =&gt; $pickerDescription,
        category    =&gt; $category,
    };
    debug "Added step picker $label";
}

sub cleanAllStepPickers {
    my ($batch) = @_;

    my @filterList = ();
    push @filterList, { "propertyName" =&gt; "propertyName", "operator" =&gt; "like", "operand1" =&gt; 'QA-GroovyGit - %' };
    my $xpath = $commander-&gt;findObjects('property', { filter =&gt; [ { operator =&gt; 'and', filter =&gt; \@filterList } ] });
    for my $object ($xpath-&gt;findnodes('//object')) {
        my $propertyName = $object-&gt;findvalue('property/propertyName')-&gt;string_value;
        if ($propertyName) {
            eval {
                $batch-&gt;deleteProperty({ propertyName =&gt; "/server/ec_customEditors/pickerStep/$propertyName" });
                debug "Deleted picker step $propertyName";
            };
            if ($@) {
                debug "Failed to delete property $propertyName: $@";
            }
        }
    }

}

sub descriptionForStepPicker {
    my ($procedureName) = @_;
    my $pluginName = 'QA-GroovyGit-1.0.0.0';
    my $description = '';
    eval {
        $description = $commander-&gt;getProperty("/projects/$pluginName/procedures/$procedureName/stepPickerDescription")-&gt;findvalue('//value')-&gt;string_value;
    };
    return $description;
}

sub shouldAddStepPicker {
    my ($procedureName) = @_;
    if ($procedureName =~ /CreateConfiguration|DeleteConfiguration|EditConfiguration/) {
        return 0;
    }
    my $shouldAdd = 1;
    eval {
        my $value = $commander-&gt;getProperty(
            "/projects/QA-GroovyGit-1.0.0.0/procedures/$procedureName/standardStepPicker")-&gt;findvalue('//value')-&gt;string_value;
        if ($value eq 'false' || $value eq '1') {
            $shouldAdd = 0;
        }
    };
    return $shouldAdd;
}




# Auto-generated part ends
####################################


# print "my custom code";

</value>
      </property>
      <property>
        <propertyName>ec_icon</propertyName>
        <value>images/icon-plugin.svg</value>
      </property>
    </propertySheet>
  </project>
</exportedData>
